
//////////////////////////////
//// WebGL Halo Animation ////
//////////////////////////////


/*--- GPU Particle Architecture ---*/

Ring Particle Animation Requirements 
  - Initial Position      // Calculated Once
  - Final Position        // Calculated Once
  - Wait                  // Calculated Once
  - Factor                // Dynamic: clamp01((currentTime - wait) / LENGTH)
  - Alpha                 // Dynamically calculated from factor
  - Brightness            // Dynamically calculated from factor
  - Position              // Dynamically calculated from factor
  - Color                 // Dynamically calculated from alpha + factor

Ring Particle Shaders
  - vertex/frag particle


Ambient Particle Animation Requirements
  - TBD. Likely animated perlin noise used for pseudorandom drift.


/*--- Texture Data ---*/

Initial Position
  R: x pos
  G: y pos
  B: z pos
  A: ---

Final Position
  R: x pos
  G: y pos
  B: z pos
  A: ---

Position
  R: x pos
  G: y pos
  B: z pos
  A: ---

Data Dynamic
  R: Alpha
  G: Brightness
  B: ---
  A: ---

Data Static
  R: Wait
  G: Seed
  B: Ambient
  A: ---


/*--- Pseudocode ---*/

Shader: Position Initial
Shader: Position Final
Shader: Data
  > Alpha (R)               // Fades out early
  > Wait (G)                // Constant
  > Brightness (B)          // Burst toward end
  > Seed (A)                // Random for each particle


/*--- Math ---*/

Dynamic Velocity Smoothing Equation (Used for each ring particle's path.)

    velocity = (1 - s(t))a + b(s(t))

    a    = starting velocity
    b    = ending velocity
    s(t) = Smooth interpolation from 0 to 1 given input t
    t    = time


/*--- Painful Lessons ---*/

1. JavaScript's decimal math is broken. Any operation that would suffer from unpredictable
   rounding errors should make use of an external library. I particularly like decimal.js.

2. Even if no operation is performed on a given frame buffer object, its values will
   subtly change over time when returned from a shader. I spent about four hours pulling
   my hair out trying to discern why each particle's unchanging wait value became more
   random over the course of each simulation. This is why.